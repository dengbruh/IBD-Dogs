#### ibd dogs vs CD humans reference group
library(tidyverse)
library(phyloseq)
library(DESeq2)

load("ibd_final.RData")

ibd_plus1 <- transform_sample_counts(ibd_final, function(x) x+1)
ibd_CD_deseq <- phyloseq_to_deseq2(ibd_plus1, ~`disease_stat`)
DESEQ_ibd_CD <- DESeq(ibd_CD_deseq)

# Make sure that the Human group is your reference group
CD_res <- results(DESEQ_ibd_CD, tidy=TRUE,
                  contrast = c("disease_stat", "IBD", "Crohn's Disease"))
View(CD_res) # "IBD" is IBD dogs, "Crohn's Disease" is CD humans
# log2foldchange is differential abundance
# p value is how confident of significance
# padj N/A is if ASV is not present in both groups

# volcano plot
vol_plot_CD <- CD_res %>%
  mutate(significant = padj<0.01 & abs(log2FoldChange)>2) %>%
  ggplot() +
  geom_point(aes(x=log2FoldChange, y=-log10(padj), col=significant)) +
  theme_bw() +
  labs(color = "Significance") +  
  scale_color_manual(values = c("TRUE" = "darkturquoise", "FALSE" = "salmon"), 
                     labels = c("Not Significant", "Significant")) +
  ylim(0,100) +
  xlim(-15,15)

ggsave(filename="Figure 5A. Volcano IBD-CD.png", vol_plot_CD)

# Create bar plot
# To get table of results
sigASVs_CD <- CD_res %>% 
  filter(padj<0.01 & abs(log2FoldChange)>2) %>%
  dplyr::rename(ASV=row)
View(sigASVs_CD)

# Get a vector of ASV names
sigASVs_CD_vec <- sigASVs_CD %>%
  pull(ASV)

# Prune phyloseq file
CD_filt <- prune_taxa(sigASVs_CD_vec, ibd_final)
# Add taxonomy onto DESeq results table
merged_results_CD <- tax_table(ibd_final) %>% as.data.frame() %>%
  rownames_to_column(var="ASV") %>%
  right_join(sigASVs_CD) %>%
  arrange(log2FoldChange) %>% # ascending order
  mutate(Genus = make.unique(Genus)) %>% # so we don't have repeating genera on x axis
  mutate(Genus = factor(Genus, levels=unique(Genus)))

merged_results_CD_10 <- rbind(head(merged_results_CD, 10),
                                   tail(merged_results_CD, 10)) %>% 
  filter(!is.na(Genus))

CD_deseq_barplot <- ggplot(merged_results_CD_10) +
  geom_bar(aes(x=Genus, y=log2FoldChange, fill = Phylum), stat="identity", position = position_dodge(width = 0.8))+
  geom_errorbar(aes(x=Genus, ymin=log2FoldChange-lfcSE, ymax=log2FoldChange+lfcSE), position = position_dodge(width = 0.8)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
  scale_x_discrete(labels = function(x) gsub("^g__", "", x)) +
  scale_fill_manual(values = c("p__Actinobacteriota" = "purple", "p__Firmicutes" = "#00BA38", "p__Proteobacteria" = "#619CFF"),
                    labels = function(x) gsub("^p__", "", x)) +
  labs(x = "Genus", y = "log2FoldChange") +
  ylim(-12,15) 

# Make sure that you have a line that saves the bar plot 
# as a png and this file is present within your project folder
ggsave("Figure 5C. Barplot IBD-CD.png", plot = CD_deseq_barplot, height=4, width=6)

num_negative <- sum(merged_results_CD$log2FoldChange < 0)
num_positive <- sum(merged_results_CD$log2FoldChange > 0)

# Displaying the counts
print(paste("Number of negative values:", num_negative))
print(paste("Number of positive values:", num_positive))

#### ibd dogs vs UC humans reference group
library(tidyverse)
library(phyloseq)
library(DESeq2)

load("ibd_final.RData")

ibd_plus1 <- transform_sample_counts(ibd_final, function(x) x+1)
ibd_UC_deseq <- phyloseq_to_deseq2(ibd_plus1, ~`disease_stat`)
DESEQ_ibd_UC <- DESeq(ibd_UC_deseq)

# Make sure that the Human group is your reference group
UC_res <- results(DESEQ_ibd_UC, tidy=TRUE,
                       contrast = c("disease_stat", "IBD", "Ulcerative Colitis"))
View(UC_res) # "IBD" is IBD dogs, "Ulcerative Colitis" is UC humans
# log2foldchange is differential abundance
# p value is how confident of significance
# padj N/A is if ASV is not present in both groups

# volcano plot
vol_plot_UC <- UC_res %>%
  mutate(significant = padj<0.01 & abs(log2FoldChange)>2) %>%
  ggplot() +
  geom_point(aes(x=log2FoldChange, y=-log10(padj), col=significant)) +
  theme_bw() +
  labs(color = "Significance") +  
  scale_color_manual(values = c("TRUE" = "darkturquoise", "FALSE" = "salmon"), 
                     labels = c("Not Significant", "Significant")) +
  ylim(0,100) +
  xlim(-15,15)

ggsave(filename="Figure 5B. Volcano IBD-UC.png", vol_plot_UC)


# Create bar plot
# To get table of results
sigASVs_UC <- UC_res %>% 
  filter(padj<0.01 & abs(log2FoldChange)>2) %>%
  dplyr::rename(ASV=row)
View(sigASVs_UC)

# Get a vector of ASV names
sigASVs_UC_vec <- sigASVs_UC %>%
  pull(ASV)

# Prune phyloseq file
UC_filt <- prune_taxa(sigASVs_UC_vec, ibd_final)
# Add taxonomy onto DESeq results table
merged_results_UC <- tax_table(ibd_final) %>% as.data.frame() %>%
  rownames_to_column(var="ASV") %>%
  right_join(sigASVs_UC) %>%
  arrange(log2FoldChange) %>% # ascending order
  mutate(Genus = make.unique(Genus)) %>% # so we don't have repeating genera on x axis
  mutate(Genus = factor(Genus, levels=unique(Genus)))

merged_results_UC_10 <- rbind(head(merged_results_UC, 10),
                                   tail(merged_results_UC, 10)) %>% 
  filter(!is.na(Genus))

UC_deseq_barplot <- ggplot(merged_results_UC_10) +
  geom_bar(aes(x=Genus, y=log2FoldChange, fill = Phylum), stat="identity", position = position_dodge(width = 0.8))+
  geom_errorbar(aes(x=Genus, ymin=log2FoldChange-lfcSE, ymax=log2FoldChange+lfcSE), position = position_dodge(width = 0.8)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)) +
  scale_x_discrete(labels = function(x) gsub("^g__", "", x)) +
  #scale_fill_discrete(labels = c("Actinobacteriota", "Firmicutes", "Proteobacteria")) + 
  scale_fill_manual(values = c("p__Actinobacteriota" = "purple", "p__Bacteroidota" = "salmon", "p__Firmicutes" = "#00BA38"),
                    labels = function(x) gsub("^p__", "", x)) +
  labs(x = "Genus", y = "log2FoldChange") +
  ylim(-12,15) 

# Make sure that you have a line that saves the bar plot 
# as a png and this file is present within your project folder
ggsave("Figure 5D. Barplot IBD-UC.png", plot = UC_deseq_barplot, height=4, width=6)

num_negative1 <- sum(merged_results_UC$log2FoldChange < 0)
num_positive1 <- sum(merged_results_UC$log2FoldChange > 0)

# Displaying the counts
print(paste("Number of negative values:", num_negative1))
print(paste("Number of positive values:", num_positive1))
